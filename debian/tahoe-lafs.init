#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          tahoe-lafs
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Tahoe-lafs nodes
### END INIT INFO

# Initscript by bertagaz <bertagaz@ptitcanardnoir.org>
# Heavily rewrote from openvpn initscript by Robert Leslie

. /lib/lsb/init-functions

DAEMON="/usr/bin/tahoe"
DESC="Tahoe-lafs secure filesystems"
CONFIG_DIR="/var/lib/tahoe-lafs"
test -x $DAEMON || exit 1
test -d $CONFIG_DIR || exit 1

# Source defaults file; edit that file to configure this script.
DAEMONARGS="--syslog"
AUTOSTART=""

if test -e /etc/default/tahoe-lafs; then
    . /etc/default/tahoe-lafs
fi

get_node_uid () {
    local node_dir="$1"
    echo `stat -c %U "$CONFIG_DIR/${node_dir}"`
}

_tahoe () {
    local action="$1"
    local node_name="$2"
    local node_uid=$(get_node_uid "$node_name")
    STATUS=0

    log_progress_msg "$node_name"

    case $action in
        start)
            if [ "$node_uid" != "root" ]; then
                start-stop-daemon --start --quiet --oknodo \
                    --pidfile "$CONFIG_DIR/${node_name}/twistd.pid" \
                    --exec $DAEMON --chuid "$node_uid" -- \
                    start $DAEMONARGS "$CONFIG_DIR/${node_name}" > /dev/null || STATUS=1
            else
                log_failure_msg "${node_name} node directory shouldn't be owned by root!"
            fi
        ;;
        stop)
            su -s "/bin/sh" -c "$DAEMON stop $CONFIG_DIR/${node_name}" "$node_uid" > /dev/null
            STATUS=$?
        ;;
        restart)
            su -s "/bin/sh" -c "$DAEMON restart $CONFIG_DIR/${node_name}" "$node_uid" > /dev/null
            STATUS=$?
        ;;
    esac
}

case "$1" in
start)
    log_daemon_msg "Starting $DESC"

    if test -z "$2" ; then
        if test "$AUTOSTART" = "none" -o -z "$AUTOSTART" ; then
            log_warning_msg " Autostart disabled."
            exit 0
        fi
        if test -z "$AUTOSTART" -o "$AUTOSTART" = "all" ; then
        # all nodes shall be started automatically
            for name in `cd $CONFIG_DIR; find ./ -mindepth 1 -maxdepth 1 -type d | cut -c3-`; do
                _tahoe start "$name"
            done
        else
            # start only nodes specified in $AUtOSTART
            for name in "$AUTOSTART" ; do
                if test -d "$CONFIG_DIR/${name}" ; then
                    _tahoe start "$name"
                else
                    log_failure_msg " No such node configured: $name"
                    STATUS=1
                fi
            done
        fi
    else
        while shift ; do
            [ -z "$1" ] && break
            name="$1"
            if test -d "$CONFIG_DIR/${name}" ; then
                _tahoe start "$name"
            else
               log_failure_msg " No such node configured: $name"
               STATUS=1
            fi
        done
    fi
    log_end_msg ${STATUS:-0}
    ;;
stop)
    log_daemon_msg "Stopping $DESC"

    if test -z "$2" ; then
        for pidfile in `find $CONFIG_DIR -name twistd.pid` ; do
            name=`echo "$pidfile" | cut -c21- | sed -e 's/\/twistd.pid//'`
            _tahoe stop "$name"
        done
    else
        while shift ; do
            [ -z "$1" ] && break
            name="$1"
            if test -e "$CONFIG_DIR/${name}/twistd.pid" ; then
                _tahoe stop "$name"
            else
                log_failure_msg " No such node running: $name"
                STATUS=1
            fi
        done
    fi
    log_end_msg ${STATUS:-0}
    ;;
restart)
    log_daemon_msg "Restarting $DESC"

    if test -z "$2" ; then
        for pidfile in `find $CONFIG_DIR -name twistd.pid` ; do
            name=`echo "$pidfile" | cut -c21- | sed -e 's/\/twistd.pid//'`
            _tahoe restart "$name"
        done
    else
        while shift ; do
            [ -z "$1" ] && break
            name="$1"
            if test -e "$CONFIG_DIR/${name}/twistd.pid" ; then
                _tahoe restart "$name"
            else
                log_failure_msg " No such node running: $name"
                STATUS=1
            fi
        done
    fi
    log_end_msg ${STATUS:-0}
    ;;
force-reload)
    $0 restart "${@}"
    ;;
*)
    echo "Usage: $0 {start|stop|restart|force-reload}" >&2
    exit 1
    ;;
esac

exit 0

# vim:set ai sts=2 sw=2 tw=0:
